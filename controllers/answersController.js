const express = require('express');
const router = express.Router();
const answersModel = require('../models/answersModel');

// üì• GET : R√©cup√©rer toutes les r√©ponses
router.get('/', async (req, res) => {
    try {
        const answers = await answersModel.getAllAnswers();
        res.json(answers);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des r√©ponses.' });
    }
});

// üì• GET : R√©cup√©rer une r√©ponse par ID
router.get('/:id', async (req, res) => {
    try {
        const answer = await answersModel.getAnswerById(req.params.id);
        if (!answer) {
            return res.status(404).json({ error: 'R√©ponse non trouv√©e.' });
        }
        res.json(answer);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration de la r√©ponse.' });
    }
});

// üì§ POST : Cr√©er une nouvelle r√©ponse
router.post('/', async (req, res) => {
    const { response, is_right, attempt_number, user_id, question_id } = req.body;
    if (!response || is_right === undefined || !attempt_number || !user_id || !question_id) {
        return res.status(400).json({ error: 'Tous les champs sont requis.' });
    }

    try {
        const newAnswer = await answersModel.createAnswer(response, is_right, attempt_number, user_id, question_id);
        res.status(201).json(newAnswer);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la cr√©ation de la r√©ponse.' });
    }
});

// üõ†Ô∏è PUT : Mettre √† jour une r√©ponse
router.put('/:id', async (req, res) => {
    const { response, is_right, attempt_number } = req.body;
    try {
        const updatedAnswer = await answersModel.updateAnswer(req.params.id, response, is_right, attempt_number);
        if (!updatedAnswer) {
            return res.status(404).json({ error: 'R√©ponse non trouv√©e.' });
        }
        res.json(updatedAnswer);
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la mise √† jour de la r√©ponse.' });
    }
});

// üóëÔ∏è DELETE : Supprimer une r√©ponse
router.delete('/:id', async (req, res) => {
    try {
        const deletedAnswer = await answersModel.deleteAnswer(req.params.id);
        if (!deletedAnswer) {
            return res.status(404).json({ error: 'R√©ponse non trouv√©e.' });
        }
        res.json({ message: 'R√©ponse supprim√©e avec succ√®s.' });
    } catch (error) {
        res.status(500).json({ error: 'Erreur lors de la suppression de la r√©ponse.' });
    }
});

module.exports = router;
